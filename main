package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

var romanArray = []string{"0", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI",
	"XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV",
	"XXV", "XXVI", "XXVII", "XXVIII", "XXIX", "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI",
	"XXXVII", "XXXVIII", "XXXIX", "XL", "XLI", "XLII", "XLIII", "XLIV", "XLV", "XLVI", "XLVII", "XLVIII",
	"XLIX", "L", "LI", "LII", "LIII", "LIV", "LV", "LVI", "LVII", "LVIII", "LIX", "LX", "LXI", "LXII",
	"LXIII", "LXIV", "LXV", "LXVI", "LXVII", "LXVIII", "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV",
	"LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII", "LXXXIV", "LXXXV",
	"LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "XCI", "XCII", "XCIII", "XCIV", "XCV", "XCVI", "XCVII",
	"XCVIII", "XCIX", "C"}

func main() {
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("Введите выражение (например, 1 + 1): ")
	text, _ := reader.ReadString('\n') // Ждет ввода данных в формате строки
	text = strings.TrimSpace(text)     // Очищает все пустоты(пробелы,табуляцию)

	parts := strings.Fields(text) // Проверка на формат из 2х чисел и одного оператора
	if len(parts) != 3 {
		fmt.Println("Ошибка: неверный формат ввода. Используйте формат 'число оператор число'.")
		return
	}

	num1, _ := strconv.Atoi(parts[0])
	operator := parts[1]
	num2, _ := strconv.Atoi(parts[2])

	myarr1, _ := strconv.Atoi(romanArray[num1])
	if num1 == myarr1 {
		num1 = myarr1
	}

	myarr2, _ := strconv.Atoi(romanArray[num2])
	if num2 == myarr2 {
		num2 = myarr2
	}

	//if num1 < 1 || num1 > 10 || num2 < 1 || num2 > 10 {
	//	fmt.Println("Ошибка: числа должны быть в диапазоне от 1 до 10.")
	//	return
	//}

	result := 0

	switch operator {
	case "+":
		result = num1 + num2
	case "-":
		result = num1 - num2
	case "*":
		result = num1 * num2
	case "/":
		result = num1 / num2
	default:
		fmt.Println("Ошибка: неверный оператор.")
		return
	}

	fmt.Printf("Результат: %d\n", result)
}
